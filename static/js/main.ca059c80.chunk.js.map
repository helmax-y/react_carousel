{"version":3,"sources":["components/Carousel.js","components/Sliders.js","components/Form.js","App.js","index.js"],"names":["Carousel","_ref","images","itemWidth","react_default","a","createElement","className","map","image","key","src","width","alt","Controls","scroll","prevClass","nextClass","type","onClick","Form","frameSize","step","isInfinite","applyItemWidth","resetItemWidth","applyFrameSize","applyStep","resetAll","toggleInfinityMode","inputWidthValue","_useState","useState","_useState2","Object","slicedToArray","isAddDisabled","disableAdd","onSubmit","event","preventDefault","htmlFor","id","placeholder","min","max","ref","onChange","target","value","disabled","option","App","currentInterval","setCurrentInterval","_useState3","_useState4","setItemWidth","_useState5","_useState6","setFrameSize","_useState7","_useState8","setStep","_useState9","_useState10","isPrevDisabled","disablePrev","_useState11","_useState12","isNextDisabled","disableNext","_useState13","_useState14","setInfinity","React","createRef","prevButtonClass","ClassNames","buttons__button","buttons__button--disabled","nextButtonClass","components_Carousel","filter","_","i","concat","toConsumableArray","Sliders","sideToScroll","indexFrom","indexTo","components_Form","current","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.ca059c80.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Carousel = ({ images, itemWidth }) => (\n  <section className=\"carousel\">\n    {images.map(image => (\n      <img\n        key={image}\n        src={image}\n        width={itemWidth}\n        alt=\"Smiley face\"\n        className=\"carousel__img\"\n      />\n    ))}\n  </section>\n);\n\nCarousel.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.string).isRequired,\n  itemWidth: PropTypes.number.isRequired,\n};\n\nexport default Carousel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Controls = ({ scroll, prevClass, nextClass }) => (\n  <section className=\"buttons\">\n    <button\n      type=\"button\"\n      className={prevClass}\n      onClick={() => scroll('left')}\n    >\n      &lt;- Previous\n    </button>\n\n    <button\n      type=\"button\"\n      className={nextClass}\n      onClick={() => scroll('right')}\n    >\n      Next -&gt;\n    </button>\n  </section>\n);\n\nControls.propTypes = {\n  scroll: PropTypes.func.isRequired,\n  prevClass: PropTypes.string.isRequired,\n  nextClass: PropTypes.string.isRequired,\n};\n\nexport default Controls;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst MIN_ITEM_WIDTH = 30;\nconst MAX_ITEM_WIDTH = 130;\n\nconst Form = ({\n  itemWidth,\n  frameSize,\n  step,\n  isInfinite,\n  applyItemWidth,\n  resetItemWidth,\n  applyFrameSize,\n  applyStep,\n  resetAll,\n  toggleInfinityMode,\n  inputWidthValue,\n}) => {\n  const [isAddDisabled, disableAdd] = useState(true);\n\n  return (\n    <form className=\"form\" onSubmit={event => event.preventDefault()}>\n      <label htmlFor=\"itemWidth\">\n        Enter preferred width of each item in pixels (30 - 130)\n        <br />\n        <input\n          id=\"itemWidth\"\n          type=\"number\"\n          placeholder=\"130\"\n          min={MIN_ITEM_WIDTH}\n          max={MAX_ITEM_WIDTH}\n          ref={inputWidthValue}\n          onChange={(event) => {\n            if (event.target.value >= 30 && event.target.value <= 130) {\n              disableAdd(false);\n            } else {\n              disableAdd(true);\n            }\n          }}\n        />\n\n        <button\n          type=\"button\"\n          className=\"form__button\"\n          disabled={isAddDisabled}\n          onClick={() => {\n            disableAdd(true);\n            applyItemWidth();\n          }}\n        >\n          OK\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"form__button\"\n          disabled={itemWidth === 130}\n          onClick={resetItemWidth}\n        >\n          Default\n        </button>\n      </label>\n      <br />\n\n      <label htmlFor=\"frameSize\">\n        Choose how many images would you like to display at the same time\n        <br />\n        <select\n          id=\"frameSize\"\n          value={frameSize}\n          onChange={applyFrameSize}\n        >\n          {[1, 2, 3, 4, 5].map(option => (\n            <option key={option}>{option}</option>\n          ))}\n        </select>\n      </label>\n      <br />\n\n      <label htmlFor=\"step\">\n        Choose how many images would you like to scroll per click\n        <br />\n        <select\n          id=\"step\"\n          value={step}\n          onChange={applyStep}\n        >\n          {[1, 2, 3, 4, 5].map(option => (\n            <option key={option}>{option}</option>\n          ))}\n        </select>\n      </label>\n      <br />\n\n      <button\n        type=\"button\"\n        className=\"form__lower-button\"\n        disabled={itemWidth === 130 && frameSize === 3 && step === 3}\n        onClick={resetAll}\n      >\n        Set all to default\n      </button>\n\n      <button\n        type=\"button\"\n        className=\"form__lower-button\"\n        onClick={toggleInfinityMode}\n      >\n        {isInfinite ? 'Disable' : 'Enable'}\n        {' '}\n        infinity mode\n      </button>\n    </form>\n  );\n};\n\nForm.propTypes = {\n  itemWidth: PropTypes.number.isRequired,\n  frameSize: PropTypes.number.isRequired,\n  step: PropTypes.number.isRequired,\n  isInfinite: PropTypes.bool.isRequired,\n  applyItemWidth: PropTypes.func.isRequired,\n  resetItemWidth: PropTypes.func.isRequired,\n  applyFrameSize: PropTypes.func.isRequired,\n  applyStep: PropTypes.func.isRequired,\n  resetAll: PropTypes.func.isRequired,\n  toggleInfinityMode: PropTypes.func.isRequired,\n  inputWidthValue: PropTypes.shape({}).isRequired,\n};\n\nexport default Form;\n","import React, { useState } from 'react';\nimport ClassNames from 'classnames';\nimport './App.scss';\nimport Carousel from './components/Carousel';\nimport Controls from './components/Sliders';\nimport Form from './components/Form';\n\nconst images = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nconst App = () => {\n  const [currentInterval, setCurrentInterval] = useState([0, 3]);\n  const [itemWidth, setItemWidth] = useState(130);\n  const [frameSize, setFrameSize] = useState(3);\n  const [step, setStep] = useState(3);\n  const [isPrevDisabled, disablePrev] = useState(true);\n  const [isNextDisabled, disableNext] = useState(false);\n  const [isInfinite, setInfinity] = useState(false);\n\n  const inputWidthValue = React.createRef();\n\n  const scroll = (sideToScroll) => {\n    let indexFrom = currentInterval[0];\n    let indexTo = currentInterval[1];\n    const minIndex = 0;\n    const maxIndex = 9;\n    const lastImage = 10;\n\n    if (isInfinite) {\n      if (sideToScroll === 'left') {\n        if (indexFrom - step < minIndex || indexTo - step < minIndex) {\n          if (indexFrom - step < minIndex) {\n            indexFrom = 10 + (indexFrom - step);\n          } else {\n            indexFrom -= step;\n          }\n\n          if (indexTo - step < minIndex) {\n            indexTo = 10 + (indexTo - step);\n          } else {\n            indexTo -= step;\n          }\n\n          setCurrentInterval([indexFrom, indexTo]);\n        } else {\n          setCurrentInterval([indexFrom - step, indexTo - step]);\n        }\n      } else if (sideToScroll === 'right') {\n        if (indexFrom + step > maxIndex || indexTo + step > maxIndex) {\n          if (indexFrom + step > maxIndex) {\n            indexFrom += step - 10;\n          } else {\n            indexFrom += step;\n          }\n\n          if (indexTo + step > maxIndex) {\n            indexTo += step - 10;\n          } else {\n            indexTo += step;\n          }\n\n          setCurrentInterval([indexFrom, indexTo]);\n        } else {\n          setCurrentInterval([indexFrom + step, indexTo + step]);\n        }\n      }\n    } else if (sideToScroll === 'left') {\n      disableNext(false);\n      if (currentInterval[0] - step <= minIndex) {\n        disablePrev(true);\n        setCurrentInterval([minIndex, frameSize]);\n      } else {\n        setCurrentInterval([\n          currentInterval[0] - step,\n          currentInterval[1] - step,\n        ]);\n      }\n    } else if (sideToScroll === 'right') {\n      disablePrev(false);\n      if (currentInterval[1] + step >= lastImage) {\n        disableNext(true);\n        setCurrentInterval([lastImage - frameSize, lastImage]);\n      } else {\n        setCurrentInterval([\n          currentInterval[0] + step,\n          currentInterval[1] + step,\n        ]);\n      }\n    }\n  };\n\n  const prevButtonClass = ClassNames(\n    { buttons__button: true },\n    { 'buttons__button--disabled': isPrevDisabled }\n  );\n\n  const nextButtonClass = ClassNames(\n    { buttons__button: true },\n    { 'buttons__button--disabled': isNextDisabled }\n  );\n\n  const applyItemWidth = () => {\n    setItemWidth(+inputWidthValue.current.value);\n  };\n\n  const resetItemWidth = () => {\n    setItemWidth(130);\n    inputWidthValue.current.value = 130;\n  };\n\n  const applyFrameSize = (event) => {\n    !isInfinite && disablePrev(true);\n    !isInfinite && disableNext(false);\n    setFrameSize(+event.target.value);\n    setCurrentInterval([0, +event.target.value]);\n  };\n\n  const applyStep = (event) => {\n    setStep(+event.target.value);\n  };\n\n  const resetAll = () => {\n    setItemWidth(130);\n    inputWidthValue.current.value = 130;\n    setFrameSize(3);\n    setStep(3);\n    setCurrentInterval([0, 3]);\n  };\n\n  const toggleInfinityMode = () => {\n    if (isInfinite) {\n      disablePrev(true);\n      setCurrentInterval([0, frameSize]);\n    } else {\n      disablePrev(false);\n      disableNext(false);\n    }\n\n    setInfinity(!isInfinite);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Carousel</h1>\n\n      <main className=\"main\">\n        <Carousel\n          images={currentInterval[0] < currentInterval[1]\n            ? images.filter((_, i) => i >= currentInterval[0]\n              && i < currentInterval[1])\n            : [\n              ...images.filter((_, i) => i >= currentInterval[0]),\n              ...images.filter((_, i) => i < currentInterval[1]),\n            ]}\n          itemWidth={itemWidth}\n        />\n\n        <Controls\n          scroll={scroll}\n          prevClass={prevButtonClass}\n          nextClass={nextButtonClass}\n        />\n\n        <Form\n          itemWidth={itemWidth}\n          frameSize={frameSize}\n          step={step}\n          isInfinite={isInfinite}\n          applyItemWidth={applyItemWidth}\n          resetItemWidth={resetItemWidth}\n          applyFrameSize={applyFrameSize}\n          applyStep={applyStep}\n          resetAll={resetAll}\n          toggleInfinityMode={toggleInfinityMode}\n          inputWidthValue={inputWidthValue}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}